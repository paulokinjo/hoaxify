{"ast":null,"code":"import { applyMiddleware, createStore } from 'redux';\nimport authReducer from './authReducer';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\n\nconst configureStore = (addLogger = true) => {\n  let localStorageData = localStorage.getItem('hoax-auth');\n  let presistedState = {\n    id: 0,\n    username: '',\n    displayName: '',\n    image: '',\n    password: '',\n    isLoggedIn: false\n  };\n  const middleware = addLogger ? applyMiddleware(thunk, logger) : applyMiddleware(thunk);\n  const store = createStore(authReducer, middleware);\n  store.subscribe(() => {\n    localStorage.setItem('hoax-auth', JSON.stringify(store.getState()));\n  });\n  return store;\n};\n\nexport default configureStore;","map":{"version":3,"sources":["/Users/paulo.kinjo/Documents/Projects/Java/hoaxify/frontend/src/redux/configureStore.js"],"names":["applyMiddleware","createStore","authReducer","logger","thunk","configureStore","addLogger","localStorageData","localStorage","getItem","presistedState","id","username","displayName","image","password","isLoggedIn","middleware","store","subscribe","setItem","JSON","stringify","getState"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,OAA7C;AAEA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;;AAEA,MAAMC,cAAc,GAAG,CAACC,SAAS,GAAG,IAAb,KAAsB;AAC3C,MAAIC,gBAAgB,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAvB;AACA,MAAIC,cAAc,GAAG;AACnBC,IAAAA,EAAE,EAAE,CADe;AAEnBC,IAAAA,QAAQ,EAAE,EAFS;AAGnBC,IAAAA,WAAW,EAAE,EAHM;AAInBC,IAAAA,KAAK,EAAE,EAJY;AAKnBC,IAAAA,QAAQ,EAAE,EALS;AAMnBC,IAAAA,UAAU,EAAE;AANO,GAArB;AAQA,QAAMC,UAAU,GAAGX,SAAS,GACxBN,eAAe,CAACI,KAAD,EAAQD,MAAR,CADS,GAExBH,eAAe,CAACI,KAAD,CAFnB;AAGA,QAAMc,KAAK,GAAGjB,WAAW,CAACC,WAAD,EAAce,UAAd,CAAzB;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpBX,IAAAA,YAAY,CAACY,OAAb,CAAqB,WAArB,EAAkCC,IAAI,CAACC,SAAL,CAAeJ,KAAK,CAACK,QAAN,EAAf,CAAlC;AACD,GAFD;AAIA,SAAOL,KAAP;AACD,CApBD;;AAsBA,eAAeb,cAAf","sourcesContent":["import { applyMiddleware, createStore } from 'redux';\r\n\r\nimport authReducer from './authReducer';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst configureStore = (addLogger = true) => {\r\n  let localStorageData = localStorage.getItem('hoax-auth');\r\n  let presistedState = {\r\n    id: 0,\r\n    username: '',\r\n    displayName: '',\r\n    image: '',\r\n    password: '',\r\n    isLoggedIn: false,\r\n  };\r\n  const middleware = addLogger\r\n    ? applyMiddleware(thunk, logger)\r\n    : applyMiddleware(thunk);\r\n  const store = createStore(authReducer, middleware);\r\n\r\n  store.subscribe(() => {\r\n    localStorage.setItem('hoax-auth', JSON.stringify(store.getState()));\r\n  });\r\n\r\n  return store;\r\n};\r\n\r\nexport default configureStore;\r\n"]},"metadata":{},"sourceType":"module"}